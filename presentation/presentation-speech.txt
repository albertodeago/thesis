Introduzione
Salve a tutti, sono Alberto De Agostini e oggi vi esporrò il mio progetto di stage che è consistito nella creazione di una infrastruttura per la raccolta, analisi e presentazione di dati per uno strumento di raccomandazione.
Slide 1 - azienda
L’azienda in cui ho fatto lo stage è THRON. 
L’obiettivo consiste nel cercare di convincere più aziende possibili ad usare Internet come principale mezzo di comunicazione. THRON adesso offre numerosi servizi Internet per la gestione di contenuti e per la comunicazione.
Slide 2 - Prodotto THRON
Sviluppa un prodotto omonimo. Di base si può vedere come un DAM (Digital Asset Management). 
In THRON affermano che è il contenuto che rappresenta il vero valore, questo quindi dev’essere slegato dalla piattaforma di distribuzione. In questo modo sono in grado di stare al passo con l’evoluzione tecnologica facilmente dovendo sviluppare solo piccoli pezzi per l’integrazione con nuovi dispositivi che nascono col passare del tempo. 
Un contenuto caricato in THRON subisce  diverse elaborazioni, ad esempio un motore semantico analizza i contenuti e associa, sia al caricamento sia durante il ciclo di vita del contenuto stesso, delle tag che servono per descriverlo e catalogarlo. Inoltre i contenuti vengono adattati per i diversi canali di distribuzioni più comuni, ad esempio al caricamento di una immagine vengono già create diversi ridimensionamenti per facilitare la fruizione per dispositivi mobili, desktop e così via…
THRON possiede inoltre una libreria dei tracciamenti con la quale è possibile raccogliere informazioni dalle proprie pagine web riguardanti le visite di utenti e il loro customer journey (viaggio che percorrono online), ad un cliente basta importare in pagina la libreria dei tracciamenti e aggiungere del codice js per tracciare eventi che gli interessano.
Slide 3 - PCR
Un altro strumento che THRON offre è quello che per comodità chiameremo PCR, ovvero Predictive Content Recommendation, questo è composto da due parti:
un motore basato su algoritmi di machine learning per la raccomandazione di contenuti. A differenza dei più diffusi sistemi raccomandativi quello di THRON non funziona per gruppi di utenti simili ma per singolo utente in modo da cercare di migliorare la raccomandazione ad hoc.
Da degli script js da copiare-incollare in pagina che creano dei widgets ready-to-use, su questo è possibile effettuare un pò di personalizzazione grafica attraverso modifiche css.
Slide 4 - Obiettivi Stage
Lo stage aveva come obiettivo principale quello di cercare di fornire ai clienti la risposta a una domanda che avevano avanzato: Quant’è efficace lo strumento di raccomandazione? 
Per rispondere a questo THRON ha deciso di creare una dashboard in cui mostrare dei grafici, così è nato questo progetto di stage.
Inoltre se possibile era richiesto anche creare una sezione in cui poter personalizzare questi widgets anche per clienti che non dispongono di alcuna conoscenza informatica.
Slide 5 - Workflow generale
Lo stage comprendeva attività in diversi ambiti dell’informatica, questo infatti è stato uno dei motivi che mi hanno spinto a scegliere questo progetto.
In linea di massimo era necessario:
Lato client modificare la libreria dei tracciamenti (basata su Snowplow) per tracciare nuovi eventi per poter fornire degli analytics per misurare la qualità di una raccomandazione
Lato server elaborare questi nuovi eventi e salvarli per poterli rendere disponibili all’esterno tramite invocazioni di web services. In questo caso le elaborazioni dati sono fatte utilizzando Spark con linguaggio Scala, i dati vengono salvati in Elasticsearch.
Lato client creare questa dashboard con i grafici da presentare al cliente
Slide 6 - Prima fase - tracciamento eventi
Abbiamo iniziato con una lunga analisi per capire cosa mostrare al cliente, cosa contraddistingue una buona raccomandazione da una non buona?
Abbiamo scelto come metrica una chiama Click Through Rate. Questo è un valore calcolato dal rapporto del numero di click (o interazioni) su un contenuto col numero di viste e viene utilizzata molto anche dai software di advertisement.
La libreria dei tracciamenti conteneva un evento chiamato Load, associato al caricamento di un contenuto in pagina web. Ho dovuto quindi aggiungere gli eventi per il Click e per la vista di un contenuto, questo è chiamato Impression.
Tuttavia i clienti avrebbero dovuto scrivere, nelle pagine necessarie, del codice javascript per usare questi eventi… In più per capire se un contenuto è stato visto è necessario capire quando questo entra nella viewport dell’utente finale e questo è un problema non banale.
Ho quindi sviluppato dei moduli aggiuntivi all’interno della libreria dei tracciamenti che contengono le logiche per tracciare in automatico contenuti di tipo immagine in pagina. In futuro sarà esteso anche per altri tipi di contenuto.
Per l’evento load bastava lanciare l’evento al caricamento del contenuto.
Per l’evento click bastava aggiungere un listener sul click all’immagine.
Per l’evento impression invece era necessario calcolare quando l’immagine entra nella viewport, (TODO: dire? non ho trovato libreria che lo facessero in modo soddisfacente quindi ho sviluppato io la logica). 
Ho aggiunto poi un altro modulo all’interno della libreria chiamato parser, questo espone un metodo per analizzare la pagina web (o una parte) e cercare se ci sono contenuti tracciabili, identificati tramite classi CSS. Quando trova uno di questi contenuti usa le logiche appena descritte per tracciare in automatico i vari eventi. Inoltre resta in ascolto, attraverso l’uso di mutation observers, sulla parte di pagina scelta; se avvengono dei cambiamenti controlla se ci sono nuovi elementi tracciabili. In questo modo non è necessaria nessuna riga di codice per tracciare gli eventi, il parser provvederà a fare tutto in automatico.
Slide 7 - prima fase - elaborazione dati
THRON utilizza un workflow personalizzato rispetto a quello standard di Snowplow, 
I dati dei tracciamenti vengono raccolti da un collector che è un software scala per l’elaborazione di stream di dati. Vengono salvati in una istanza di Elasticsearch e letti da un enricher comune, questo effettua delle elaborazioni utili a tutti i tre blocchi successivi.
L’enricher del behaviour serve per analizzare il comportamento di utenti per classificarli.
Quello del recommendation serve per il calcolo delle raccomandazioni ai singoli utenti
Quello dei reports invece serve per creare dei dati ad hoc per la presentazione di analytics.
Per i primi due ho dovuto fare in modo che i nuovi eventi fossero filtrati, gli algoritmi al loro interno solo molto delicati e complessi e necessitano ulteriori analisi per utilizzare le nuove informazioni. Per i reports al contrario ho duvuto far si che il software usasse anche i nuovi dati e li salvasse in altri indici di Elasticseach pronti per essere erogati tramite invocazione di web service da client.
Slide  8 - seconda fase
Per la seconda fase in figura possiamo vedere il workflow pensato e poi sviluppato.
THRON utilizza un Elasticsearch, chiamato Es di monitoring, in cui vengono salvati dei log per ogni accesso alle loro API. Questi dati sono utili per fornire al cliente informazioni non riguardo alla bontà delle raccomandazioni bensì alla quantità, il PCR infatti è pagato a raccomandazioni/ora.
Questo ES tiene dati non più vecchi di 30 giorni, questo perchè i log ammontano a circa 4-5 GB al giorno. THRON invece voleva fornire le informazioni, attraverso analytics, con retention di 2 anni. Per questo ho sviluppato un servizio che ogni ora interroghi ES di monitoring e salvi la quantità di raccomandazioni, per ogni applicazione raccomandativa, in un MongoDB. Un altro servizio invece, eseguito una volta al mese, che ripulisca il DB dai dati più vecchi di due anni per evitare l’accumulo di troppi dati col passare del tempo. 
È stato necessario poi implementare dei Web services per poter interrogare il database e fornire i dati a client richiedenti. 
Slide 9 - terza e ultima fase, creazione grafici 
Nell’ultima fase ho dovuto creare la dashboard contenente dei grafici che descrivessero tutti i dati raccolti nelle fasi precedenti.
In fase di analisi sono stati creati questi mockup per avere un’idea dell’obiettivo che si voleva raggiungere e i tipi di grafici da fornire ai clienti.
Prima di tutto vediamo il grafico, chiamato grafico quantitativo, che deve mostrare la quantità di raccomandazioni effettuate da un applicazione master e da tutte le singole slave, filtrabile per appslave, per periodo e per granularità. In caso di granularità oraria deve mostrare una linea che rappresenta il num max di racc effettuabili col proprio business model.
Al click su una slave si apre il dettaglio della singola app
Slide 10 - terza fase, creazione grafici
In questa pagina è stato deciso di mostrare un elenco dei 50 contenuti con più raccomandazioni, per ognuno mostrare delle barre raffiguranti il numero di click e il numero di impression ricevute, possibile filtrare per data e ordinare per più impression o più click.
A destra si mostrerà il numero di click e impression totali dell’app e dei grafici tag cloud che mostrano le tag dei contenuti più raccomandati e quelle dei contatti associati ai contenuti più raccomandati.
Slide 11 - terza fase, creazione grafici
Al click sulla thumbnail di un contenuto si apre una finestra modale in cui ci sono i dettagli di quel contenuto quali:
La descrizione, le tag, un grafico che mostra le tipologie di utenti che hanno cliccato di più e un altro che mostra gli argomenti più trattati da questi utenti.
Slide 12/13/14 - Risultati ottenuti
In queste slides possiamo vedere i risultati ottenuti a fine stage. Con soddisfazione sono stati creati tutti i grafici richiesti e, anche se non senza difficoltà, tutto è andato come richiesto. Purtroppo non ho potuto soddisfare il requisito non obbligatorio che richiedeva di creare un meccanismo di personalizzazione dei widgets raccomandativi per mancanza di 
